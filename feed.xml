<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="/jekyll-theme-yat/feed.xml" rel="self" type="application/atom+xml" /><link href="/jekyll-theme-yat/" rel="alternate" type="text/html" /><updated>2025-01-08T05:27:35+00:00</updated><id>/jekyll-theme-yat/feed.xml</id><title type="html">RUOGU LI 若谷花園</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>John J.K. Lee(Ruogu Li)</name></author><entry><title type="html">612实验室专用(2025)</title><link href="/jekyll-theme-yat/none/2025/01/08/612LAB-CN.html" rel="alternate" type="text/html" title="612实验室专用(2025)" /><published>2025-01-08T00:00:00+00:00</published><updated>2025-01-08T00:00:00+00:00</updated><id>/jekyll-theme-yat/none/2025/01/08/612LAB-CN</id><content type="html" xml:base="/jekyll-theme-yat/none/2025/01/08/612LAB-CN.html"><![CDATA[<p>创建日期：<strong>2025-01-08</strong></p>

<p>最近修改日期：<strong>2025-01-08</strong></p>

<h2 id="安装bohrium-cliwindows系统">安装Bohrium CLI（Windows系统）</h2>

<ol>
  <li>
    <p>对于<strong>Bohrium CLI</strong>我建议在linux环境下使用，Windows系统下某些功能不可用。该文章只是给只熟悉Windows系统的同学使用，你可以在此<a href="https://bohrium-doc.dp.tech/docs/bohrctl/about">连接</a>找到官方给予的更多细节。</p>
  </li>
  <li>
    <p>首先，在任意一个非中文路径文件夹右键选择使用<strong>终端</strong>打开，如果你右键没有终端，请在键盘上按住<strong>Win</strong> + <strong>R</strong>两个键，在弹出的框中输出<strong>cmd</strong>，并确定。复制粘贴以下代码，然后回车：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -o install_bohr_windows_wget.bat https://dp-public.oss-cn-beijing.aliyuncs.com/bohrctl/1.0.0/install_bohr_windows_curl.bat &amp;&amp; install_bohr_windows_wget.bat
</code></pre></div>    </div>
  </li>
  <li>
    <p>暂时不要关闭该终端，复制红框部分的路径（原因是我发现其并没有自动设置好环境变量，需要自己设置）。</p>

    <p><img src=".\images\2025_01_08_612lab&#8291;1.png" alt="" /></p>

    <p>接着编辑系统变量（请你根据你自己的系统版本查找如何打开系统变量的设置界面）。</p>

    <p><img src=".\images\2025_01_08_612lab&#8291;2.png" alt="" /></p>

    <p>接着点击环境变量。</p>

    <p><img src=".\images\2025_01_08_612lab&#8291;3.png" alt="" /></p>
  </li>
</ol>

<p>接着找到用户变量中的Path项，如果没有则新建一个，如果有则点击编辑-新建-粘贴你刚才复制的路径-确定-确定。</p>

<p><img src=".\images\2025_01_08_612lab&#8291;4.png" alt="4" /></p>

<ol>
  <li>
    <p>设置令牌，按照刚才的方法打开终端（cmd），键入以下命令：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setx ACCESS_KEY XXXX
</code></pre></div>    </div>

    <p>其中XXXX为你在bohrium上的令牌，你可以根据以下步骤找到，则并替换上面的XXXX（注意请不要将该令牌告知任何人，这相当于你的密码）：</p>

    <p><img src=".\images\2025_01_08_612lab&#8291;5.png" alt="5" /></p>
  </li>
  <li>
    <p>设置好之后，关闭终端窗口，再次打开终端(cmd)，键入以下命令：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bohr job list
</code></pre></div>    </div>

    <p>如果出现类似界面则配置成功：</p>

    <p><img src=".\images\2025_01_08_612lab&#8291;6.png" alt="6" /></p>
  </li>
</ol>

<h2 id="使用qcexe提交orca作业">使用qc.exe提交ORCA作业</h2>

<ol>
  <li>
    <p>将含有qc.exe的压缩包解压到某个非中文路径之中</p>
  </li>
  <li>
    <p>双击qc.exe运行，先选择2生成提交到Bohrium的文件。首次运行会提示：</p>

    <p><strong>警告：bohr.set 文件不存在，你需要手动输入某些值（回车使用默认值）</strong></p>

    <p>一路按回车就是了，除了project_id必须要你手动输入，该项为纯数字，例如55005</p>

    <p>注意在program_inp文件中必须存在.inp文件，否则程序会询问你含有.inp文件的路径。</p>

    <p>提示<strong>功能已执行完毕</strong>则可以键入H返回主菜单</p>
  </li>
  <li>
    <p>选择功能3，即可提交作业到Bohrium。</p>
  </li>
</ol>]]></content><author><name>Ruogu Li</name></author><category term="NONE" /><category term="612lab" /><summary type="html"><![CDATA[创建日期：2025-01-08]]></summary></entry><entry><title type="html">2025年年度计划</title><link href="/jekyll-theme-yat/annual/plan/2024/12/31/Annual-plan-CN.html" rel="alternate" type="text/html" title="2025年年度计划" /><published>2024-12-31T00:00:00+00:00</published><updated>2024-12-31T00:00:00+00:00</updated><id>/jekyll-theme-yat/annual/plan/2024/12/31/Annual-plan-CN</id><content type="html" xml:base="/jekyll-theme-yat/annual/plan/2024/12/31/Annual-plan-CN.html"><![CDATA[<p>非常高兴活过了2024年，在这篇年末文章中我们对2025要进行的任务做个清单</p>

<h2 id="1-软件开发方向年度计划">1. 软件开发方向（年度计划）</h2>
<p>1、希望将构思了两年的软件开发提上日程，使用的主要语言为Rust。
2、首个版本将专注于和超算平台的交互；第二个版本将专注于Gaussian/ORCA/CP2K/QE等软件的input文件生成和output文件分析/可视化，核心围绕ORCA和CP2K展开；第三个版本将专注于分子可视化和波函数分析。</p>

<h2 id="2烂尾方向季度计划">2.烂尾方向（季度计划）</h2>
<p>1、当前网站存在着几篇烂尾的文章/存在重大错误的文章，希望在2025年第一季度之前做好一些补足。</p>

<h2 id="3语言学习笔记季度计划">3.语言学习笔记（季度计划）</h2>
<p>1、计划将Rust笔记整理好，我很喜欢Obsidian的展示方式。但通过Obsidian做个站点是要收费的，目前还没有计划好具体细节。</p>

<h2 id="4读书笔记年度计划">4.读书笔记（年度计划）</h2>
<p>1、本月写一篇稿子的时候，发现自己的语言能力大幅下降。（也许是讨厌那个方向的稿子）准备把这几年读过的一些书加以整理，做成笔记的形式方便回顾。包括但不限于费洛伊德、马斯洛、荣格、伍尔夫、卡夫卡、波伏娃、叔本华、钱钟书、木心、加缪、黑塞、达利欧。</p>

<p>希望还能活着走到2025再做个总结。</p>]]></content><author><name>Ruogu Li</name></author><category term="annual" /><category term="plan" /><category term="2025" /><category term="quantum" /><category term="chemistry" /><summary type="html"><![CDATA[非常高兴活过了2024年，在这篇年末文章中我们对2025要进行的任务做个清单]]></summary></entry><entry><title type="html">612实验室专用</title><link href="/jekyll-theme-yat/none/2024/08/14/612LAB-CN.html" rel="alternate" type="text/html" title="612实验室专用" /><published>2024-08-14T00:00:00+00:00</published><updated>2024-08-14T00:00:00+00:00</updated><id>/jekyll-theme-yat/none/2024/08/14/612LAB-CN</id><content type="html" xml:base="/jekyll-theme-yat/none/2024/08/14/612LAB-CN.html"><![CDATA[<p>创建日期：<strong>2024-08-14</strong></p>

<p>最近修改日期：<strong>2025-01-05</strong></p>

<h2 id="手动提交作业">手动提交作业</h2>

<p>ORCA 6.0.0作业提交命令(仅限我自己编译的)：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/orca600/orca_6_0_0_shared_openmpi416/orca &lt;input_file&gt; &gt; &lt;input_file&gt;.out
</code></pre></div></div>
<h2 id="lbg自动化提交作业">lbg自动化提交作业</h2>
<h3 id="1初始化只用进行一次">1、初始化（只用进行一次）</h3>

<p>第一步创建2核心16GB的节点，使用带有ORCA 6.0.0的镜像</p>

<p>使用命令安装lbg</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install lbg
</code></pre></div></div>
<p>输入账户名称和密码</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lbg config account
</code></pre></div></div>
<p>注意输入密码的时候屏幕不会有任何动静，你需要使用英文输入法
创建一个job文件夹</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir job
</code></pre></div></div>
<h3 id="2作业与提交">2、作业与提交</h3>
<p>先查看当前路径下的文件</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls
</code></pre></div></div>

<p>如果有job文件夹则进入目录/job/</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd job
</code></pre></div></div>

<p>查看当前路径是否存在其它文件（<strong>需要该路径为空</strong>）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls
</code></pre></div></div>

<p>如果你的/job/文件夹是<strong>非空</strong>的，请使用这个命令删除所有文件与文件夹（<strong>慎用</strong>）</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rm -rf *
</code></pre></div></div>

<p>将job.tar文件<a href="https://github.com/shucilee/shucilee.github.io/blob/master/_posts/Pasted%20image%2020250105122532.png">上传</a>到文件夹并<strong>复制路径</strong></p>

<p>复制上传的job.tar<a href="https://github.com/shucilee/shucilee.github.io/blob/master/_posts/Pasted%20image%2020250105123138.png">文件路径</a></p>

<p>自行修改以下命令（mv+空格+路径+空格+/job/)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mv 粘贴你的路径 /job/
</code></pre></div></div>

<p>检查当前路径是否存在job.tar文件</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls
</code></pre></div></div>

<p>如果有则解压文件</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tar -xvf job.tar
</code></pre></div></div>
<p>进入作业计算目录/job/job/</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd job
</code></pre></div></div>

<p>检查路径中是否存在作业文件夹以及start.sh文件</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls
</code></pre></div></div>

<p>提交作业</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash start.sh
</code></pre></div></div>
<p>如果你需要终止自动提交的start.sh，请在键盘上按下Ctrl + C即可（+号不用按）</p>]]></content><author><name>Ruogu Li</name></author><category term="NONE" /><category term="612lab" /><summary type="html"><![CDATA[创建日期：2024-08-14]]></summary></entry><entry><title type="html">ORCA 6.0.0安装与并行测试</title><link href="/jekyll-theme-yat/orca/2024/08/13/ORCA-6.0.0-CN.html" rel="alternate" type="text/html" title="ORCA 6.0.0安装与并行测试" /><published>2024-08-13T00:00:00+00:00</published><updated>2024-08-13T00:00:00+00:00</updated><id>/jekyll-theme-yat/orca/2024/08/13/ORCA-6.0.0-CN</id><content type="html" xml:base="/jekyll-theme-yat/orca/2024/08/13/ORCA-6.0.0-CN.html"><![CDATA[<p>发布时间：2024-08-13</p>

<p>最后修改时间：2025-01-05</p>

<h3 id="基本镜像信息">基本镜像信息</h3>

<p>ubuntu:22.04-py3.10-cuda12.1</p>

<h3 id="安装流程">安装流程</h3>

<p>下载<a href="https://orcaforum.kofo.mpg.de/">ORCA</a>，我选择的是动态库版本：orca_6_0_0_linux_x86-64_shared_openmpi416.tar.xz</p>

<p>下载对应的<a href="https://www.open-mpi.org/">Open MPI</a>，此例为4.1.6：openmpi-4.1.6.tar.bz2</p>

<p>安装sudo：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt install sudo
</code></pre></div></div>
<p>安装gcc和gfortran：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt update
sudo apt install gcc
sudo apt install gfortran
</code></pre></div></div>
<p>新建一个文件夹，并解压、编译、安装Open MPI:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir openmpi4.6.1
cd openmpi4.6.1 #假定你已经将openmpi-4.1.6.tar.bz2复制到这里
tar -xjvf openmpi-4.1.6.tar.bz2
./configure --prefix=/openmpi4.1.6 --disable-builtin-atomics
make all install #用-j本人出现了报错
</code></pre></div></div>
<p>将路径写入~/.bashrc：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi ~/.bashrc
export PATH=$PATH:/openmpi4.1.6/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/openmpi4.1.6/lib
export OMPI_ALLOW_RUN_AS_ROOT=1
export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
</code></pre></div></div>
<p>编辑hostfile，注意如果你编译Open MPI的机子与实际计算的机子核心数不同，请在测试可以并行计算后自行修改 /openmpi4.1.6/etc/目录下的openmpi-default-hostfile:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "localhost slots=$(cat /proc/cpuinfo | grep 'processor' | sort -u | wc -l)" &gt;&gt; /openmpi4.1.6/etc/openmpi-default-hostfile
</code></pre></div></div>
<p>解压下载的ORCA包，并写入~/.bashrc:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir orca600
cd orca600 #假定你已经将orca_6_0_0_linux_x86-64_shared_openmpi416.tar.xz复制到这里
tar -xf orca_6_0_0_linux_x86-64_shared_openmpi416.tar.xz
vi ~/.bashrc
export PATH=$PATH:/orca600/orca_6_0_0_shared_openmpi416
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/orca600/orca_6_0_0_shared_openmpi416
alias orca='/orca600/orca_6_0_0_shared_openmpi416/orca'
</code></pre></div></div>
<p>测试能否正常并行计算，在该教程中我使用的是4核心的机器</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi test.inp
</code></pre></div></div>
<p>复制粘贴以下内容</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>! BLYP def2-SVP noautostart miniprint pal4
* xyz 0 1
 C                 -2.30500585    0.80908031    0.00000000
 C                 -0.90984585    0.80908031    0.00000000
 C                 -0.21230785    2.01683131    0.00000000
 C                 -0.90996185    3.22534031   -0.00119900
 C                 -2.30478685    3.22526231   -0.00167800
 C                 -3.00238785    2.01705631   -0.00068200
 H                 -2.85476485   -0.14323669    0.00045000
 H                 -0.36033785   -0.14343269    0.00131500
 H                  0.88737215    2.01691131    0.00063400
 H                 -0.35976185    4.17748331   -0.00125800
 H                 -2.85490885    4.17754331   -0.00263100
 H                 -4.10199185    2.01723931   -0.00086200
*
</code></pre></div></div>
<p>保存并退出后使用以下命令进行测试：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>orca test.inp &gt; test.out
</code></pre></div></div>
<p>命令行输入top命令，可以看到有四个CPU占用较大的ORCA任务即为并行成功</p>

<p>自己常用的作业提交命令</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/orca600/orca_6_0_0_shared_openmpi416/orca &lt;input_file&gt; &gt; &lt;input_file&gt;.out
</code></pre></div></div>]]></content><author><name>ShuCi Lee</name></author><category term="ORCA" /><category term="ORCA" /><summary type="html"><![CDATA[发布时间：2024-08-13 最后修改时间：2025-01-05 基本镜像信息 ubuntu:22.04-py3.10-cuda12.1 安装流程 下载ORCA，我选择的是动态库版本：orca_6_0_0_linux_x86-64_shared_openmpi416.tar.xz 下载对应的Open MPI，此例为4.1.6：openmpi-4.1.6.tar.bz2 安装sudo： apt install sudo 安装gcc和gfortran： sudo apt update sudo apt install gcc sudo apt install gfortran 新建一个文件夹，并解压、编译、安装Open MPI: mkdir openmpi4.6.1 cd openmpi4.6.1 #假定你已经将openmpi-4.1.6.tar.bz2复制到这里 tar -xjvf openmpi-4.1.6.tar.bz2 ./configure --prefix=/openmpi4.1.6 --disable-builtin-atomics make all install #用-j本人出现了报错 将路径写入~/.bashrc： vi ~/.bashrc export PATH=$PATH:/openmpi4.1.6/bin export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/openmpi4.1.6/lib export OMPI_ALLOW_RUN_AS_ROOT=1 export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1 编辑hostfile，注意如果你编译Open MPI的机子与实际计算的机子核心数不同，请在测试可以并行计算后自行修改 /openmpi4.1.6/etc/目录下的openmpi-default-hostfile: echo "localhost slots=$(cat /proc/cpuinfo | grep 'processor' | sort -u | wc -l)" &gt;&gt; /openmpi4.1.6/etc/openmpi-default-hostfile 解压下载的ORCA包，并写入~/.bashrc: mkdir orca600 cd orca600 #假定你已经将orca_6_0_0_linux_x86-64_shared_openmpi416.tar.xz复制到这里 tar -xf orca_6_0_0_linux_x86-64_shared_openmpi416.tar.xz vi ~/.bashrc export PATH=$PATH:/orca600/orca_6_0_0_shared_openmpi416 export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/orca600/orca_6_0_0_shared_openmpi416 alias orca='/orca600/orca_6_0_0_shared_openmpi416/orca' 测试能否正常并行计算，在该教程中我使用的是4核心的机器 vi test.inp 复制粘贴以下内容 ! BLYP def2-SVP noautostart miniprint pal4 * xyz 0 1 C -2.30500585 0.80908031 0.00000000 C -0.90984585 0.80908031 0.00000000 C -0.21230785 2.01683131 0.00000000 C -0.90996185 3.22534031 -0.00119900 C -2.30478685 3.22526231 -0.00167800 C -3.00238785 2.01705631 -0.00068200 H -2.85476485 -0.14323669 0.00045000 H -0.36033785 -0.14343269 0.00131500 H 0.88737215 2.01691131 0.00063400 H -0.35976185 4.17748331 -0.00125800 H -2.85490885 4.17754331 -0.00263100 H -4.10199185 2.01723931 -0.00086200 * 保存并退出后使用以下命令进行测试： orca test.inp &gt; test.out 命令行输入top命令，可以看到有四个CPU占用较大的ORCA任务即为并行成功 自己常用的作业提交命令 /orca600/orca_6_0_0_shared_openmpi416/orca &lt;input_file&gt; &gt; &lt;input_file&gt;.out]]></summary></entry><entry><title type="html">ORCA使用筆記</title><link href="/jekyll-theme-yat/orca/2024/04/29/ORCA-504-CN.html" rel="alternate" type="text/html" title="ORCA使用筆記" /><published>2024-04-29T00:00:00+00:00</published><updated>2024-04-29T00:00:00+00:00</updated><id>/jekyll-theme-yat/orca/2024/04/29/ORCA-504-CN</id><content type="html" xml:base="/jekyll-theme-yat/orca/2024/04/29/ORCA-504-CN.html"><![CDATA[<p>ORCA是一個免費的量子化學軟體，強烈建議你在此<a href="https://orcaforum.kofo.mpg.de/">網站</a>上註冊後下載可執行程式。有時，我也打不開這個網址。如果你是Windows用戶，我還建議你下載<a href="https://avogadro.cc/">Avogadro</a>，以更好的進行可視化。注意，請將這些軟體安裝到你可以找到的地方，否則在某個時刻，你會感無助。Linux用戶通常有較好的動手能力，此文可能對這類型用戶無用。</p>

<h2 id="1分子結構的優化opt和頻率計算freq">1.分子結構的優化(opt)和頻率計算(freq)</h2>

<ol>
  <li>
    <p>首先，你需要獲取某些分子的結構文件。我相信，你可以從<a href="https://pubchem.ncbi.nlm.nih.gov/">pubchem</a>上獲取到大多數東西。</p>

    <p>1.1 在這個例子中我們嘗試在真空下優化一個<a href="https://pubchem.ncbi.nlm.nih.gov/compound/962">水分子</a>的結構，你會發現pubchem提供了一個2D的水分子sdf文件，你猜猜為什麼沒有提供3d的sdf文件呢🤔。將下載好的Structure2D_COMPOUND_CID_962.sdf拖動進入Avogadro中，如果Avogadro出現彈窗，請選擇YES（對於2D的sdf文件而言）。此時，Avogadro已經顯示出一個水分子的形象，按照如下步驟點擊：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>File -&gt; Save As -&gt; .xyz
</code></pre></div>    </div>

    <p>事實上，你可以使用Avogadro來搭建你所需要的化合物結構，但在這裡我就不具體展開了。請保存.xyz文件到一個小孩子都能看到的地方，右鍵該文件，使用文本編輯器打開，你會看到如下內容：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3
   
O          0.92794       -0.03832       -0.05541
H          0.64909       -0.56621       -0.81865
H          1.89583       -0.06474       -0.09360
</code></pre></div>    </div>

    <p>顯然，3代表的是系統中的原子總數。後邊，是笛卡爾坐標系下的三個原子座標。這是一個非常簡潔且直觀的表達方式。下面我提供了一個用於結構優化的模版文件：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>! B3LYP D3 def2-SVP def2/J RIJCOSX noautostart miniprint nopop opt
%maxcore  3500
%pal nprocs  64 end
* xyz   0   1
   
*
</code></pre></div>    </div>

    <p>請讓我簡單介紹一下這些東西，B3LYP是我們使用的泛函的名稱，def2-SVP是我們在該計算過程中使用的基組，D3是我們用於修正對弱相互作用的描述，opt代表的是我們將要進行結構優化計算。%maxcore定義了我們在計算時1個核心所分配的最大內存是3.5GB，%pal nprocs  64 end定義了我們將要使用64個核心進行計算，因此你的電腦至少需要有64個核心以及3.5*64=224GB的內存，如果你電腦之中內存不足，可能會出現讓人煩惱之事。事實上，在完成opt計算後，可以自動進行頻率計算，你只需要同時寫上兩個關鍵詞即可：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>! B3LYP D3 def2-SVP def2/J RIJCOSX noautostart miniprint nopop opt freq
</code></pre></div>    </div>

    <p>但是，在進行某些大體系的freq計算時，需要巨大的內存，這可能會導致錯誤。（即使你限定單個核心使用3.5GB，實際計算過程仍然可能會超過這一數值）。因此，在你沒有能力預估你的計算大約需要多少內存之前，建議你不要寫上freq關鍵詞，這可能會為你在某些雲計算中心省下一筆錢。* xyz   0   1中，xyz定義了我們的坐標系為笛卡爾坐標系，0代表的是系統的淨電荷數，1代表的是自旋多重度。顯然，水分子的淨電荷數為0。請在計算之前詳細考慮如何設置系統的淨電荷數和自旋多重度，這將極大的影響計算結果。我們將之前的.xyz文件中三個原子的笛卡爾座標複製到模板文件的兩個*號之間：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>! B3LYP D3 def2-SVP def2/J RIJCOSX noautostart miniprint nopop opt
%maxcore  3500
%pal nprocs  64 end
* xyz   0   1
O          0.92794       -0.03832       -0.05541
H          0.64909       -0.56621       -0.81865
H          1.89583       -0.06474       -0.09360
*
</code></pre></div>    </div>

    <p>保存該文件為water.inp，顯然，我們要進行的是結構優化計算(opt)。將該文件上傳到計算中心後，選擇64核心256GB機型，使用該命令提交：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/orca504/orca_5_0_4_linux_x86-64_shared_openmpi411/orca water.inp &gt; water.out --allow-run-as-root
</code></pre></div>    </div>

    <p>計算完成後，在water_trj.xyz文件中可觀察到優化過程中所有原子的笛卡爾座標變化，在water.xyz文件中有最後一次優化而保存下來的結構，這是我們需要的。將water.xyz文件的笛卡爾座標複製到模板中，將進行freq計算：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>! B3LYP D3 def2-SVP def2/J RIJCOSX noautostart miniprint nopop freq
%maxcore  3500
%pal nprocs  64 end
* xyz   0   1
O   0.92614371640324     -0.03687197693869     -0.05331642575360
H   0.65515499887632     -0.56485658654145     -0.81669314383927
H   1.89156128472044     -0.06754143651986     -0.09765043040713
*
</code></pre></div>    </div>

    <p>注意，這裡面沒有opt，而是freq，將文件保存為water_freq.inp。使用以下命令提交作業：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/opt/orca504/orca_5_0_4_linux_x86-64_shared_openmpi411/orca water_freq.inp &gt; water_freq.out --allow-run-as-root
</code></pre></div>    </div>

    <p>計算完成後，將water_freq.out拖入Avogadro後，可以看見有三個頻率，分別是1638.17、3787.36、3881.42。詢問一下你6歲的弟弟妹妹，他們會告訴你一個難以被察覺的事實——這三個數都大於0。通常情況下，沒有負數頻率（虛頻）代表著，在我們之前所設置的條件下分子已經優化到最低的能量結構。如果有負數頻率（虛頻），那麼你可能需要微調該結構，重新進行opt和freq計算。</p>
  </li>
</ol>]]></content><author><name>Shuci Lee</name></author><category term="ORCA" /><category term="ORCA" /><category term="Linux" /><category term="Vim" /><category term="wow" /><summary type="html"><![CDATA[ORCA是一個免費的量子化學軟體，強烈建議你在此網站上註冊後下載可執行程式。有時，我也打不開這個網址。如果你是Windows用戶，我還建議你下載Avogadro，以更好的進行可視化。注意，請將這些軟體安裝到你可以找到的地方，否則在某個時刻，你會感無助。Linux用戶通常有較好的動手能力，此文可能對這類型用戶無用。]]></summary></entry><entry><title type="html">Quantum Espresso使用筆記</title><link href="/jekyll-theme-yat/quantumespresso/2023/01/01/Quantum-Espresso-CN.html" rel="alternate" type="text/html" title="Quantum Espresso使用筆記" /><published>2023-01-01T00:00:00+00:00</published><updated>2023-01-01T00:00:00+00:00</updated><id>/jekyll-theme-yat/quantumespresso/2023/01/01/Quantum-Espresso-CN</id><content type="html" xml:base="/jekyll-theme-yat/quantumespresso/2023/01/01/Quantum-Espresso-CN.html"><![CDATA[<p>Quantum ESPRESSO是一款開源免費的第一性原理程序，你可以在此<a href="https://www.quantum-espresso.org/">網站</a>上註冊後下載code。</p>

<h2 id="1-rocky-linux-73-下安裝quantum-espresso-71">1. Rocky Linux 7.3 下安裝Quantum ESPRESSO 7.1</h2>

<ol>
  <li>
    <p>安裝OpenMPI</p>

    <p>1.1 前往此<a href="https://www.open-mpi.org/">網站</a>下載openmpi-5.0.2.tar.gz到本地文件夾，在該文件所在位置打開控制台。我的文件保存位置為:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/home/apple/app
</code></pre></div>    </div>

    <p>你可以使用pwd命令查看當前文件所處位置，根據你的實際情況自行更改以下命令：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pwd #查看文件所在位置
tar -xzvf openmpi-5.0.2.tar.gz #解壓
mkdir openmpi502 #創建一個名字為openmpi502的文件夾
ls
cd /home/apple/app/openmpi-5.0.2
./configure --prefix=/home/apple/app/openmpi502 #編譯到openmpi502
make all install
</code></pre></div>    </div>

    <p>如果一切順利，鍵入以下命令：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi ~/.bashrc
</code></pre></div>    </div>

    <p>按下鍵盤上的Ins按鍵或者字母i，找到空白之處，鍵入以下內容：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export PATH=$PATH:/home/apple/app/openmpi502/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/apple/app/openmpi502/lib
</code></pre></div>    </div>

    <p>接著按下鍵盤上的Esc按鍵，輸入：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:wq
</code></pre></div>    </div>

    <p>關閉當前控制台，重新打開，鍵入以下內容檢查OpenMPI是否可以正常調用：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mpiexec -V
</code></pre></div>    </div>

    <p>如果出現版本號，那麼你就不需要再次開始一些無聊之事。</p>
  </li>
</ol>

<h2 id="section-2">section 2</h2>

<p>test3</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello World!"</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// prints 'Hi, Tom' to STDOUT.</span>
</code></pre></div></div>]]></content><author><name>Shuci Lee</name></author><category term="QuantumEspresso" /><category term="QuantumEspresso" /><category term="Linux" /><category term="Vim" /><category term="MKL" /><category term="gcc" /><category term="gfortran" /><category term="openmpi" /><category term="wow" /><summary type="html"><![CDATA[Quantum ESPRESSO是一款開源免費的第一性原理程序，你可以在此網站上註冊後下載code。]]></summary></entry></feed>